from __future__ import print_function

import unittest
from agimus_sot.srdf_parser import parse_srdf_string

class TestAgimusParser(unittest.TestCase):
  def test_parser(self):
    srdf="""<?xml version="1.0" ?>
    <!-- =================================================================================== -->
    <!-- |    This document was autogenerated by xacro from plank_of_wood_srdf.xacro       | -->
    <!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
    <!-- =================================================================================== -->
    <robot name="plank_of_wood1" xmlns:xacro="http://www.ros.org/wiki/xacro">
      <handle name="handle1" clearance="0.08">
        <position> -0.06 0 0  0.707106781187 -0.707106781187 0 0 </position>
        <link name="base_link"/>
      </handle>
      <handle name="handle2" clearance="0.08">
        <position> 0.06 0 0  0 0 -0.707106781187 0.707106781187 </position>
        <link name="base_link"/>
      </handle>

      <contact name="bottom_surface">
        <link name="base_link"/>
        <point>
          +0.105 +0.02 -0.071
          +0.105 -0.02 -0.071
          -0.105 -0.02 -0.071
          -0.105 +0.02 -0.071
        </point>
        <shape>
          4 0 1 2 3
        </shape>
      </contact>
      <contact name="top_surface">
        <link name="base_link"/>
        <point>
          +0.1015 +0.022 0.058
          +0.1015 -0.022 0.058
          -0.1015 -0.022 0.058
          -0.1015 +0.022 0.058
        </point>
        <shape>
          4 3 2 1 0
        </shape>
      </contact>
    </robot>
    """

    content = parse_srdf_string (srdf)
    self.assertIsInstance(content, dict)
    self.assertIn("grippers", content)
    self.assertIn("handles", content)
    self.assertIn("contacts", content)

    self.assertIn("handle1", content["handles"])
    self.assertIn("handle2", content["handles"])
    for n, h in content["handles"].items():
        self.assertIsNone(h["robot"])
        self.assertEqual(n, h["name"])
        self.assertIn("clearance", h)
        self.assertIn("link", h)
        self.assertIn("position", h)
        self.assertIn("mask", h)

    self.assertIn("bottom_surface", content["contacts"])
    self.assertIn("top_surface", content["contacts"])
    for n, c in content["contacts"].items():
        self.assertIsNone(c["robot"])
        self.assertEqual(n, c["name"])
        self.assertIn("link", c)
        self.assertIn("points", c)
        self.assertIn("shapes", c)

if __name__ == '__main__':
    unittest.main()
